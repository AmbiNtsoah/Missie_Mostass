name: CI/CD Pipeline (Windows)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Créer le répertoire build
        run: mkdir build

      - name: Télécharger les dépendances JUnit
        run: |
          curl -L -o junit-platform-console-standalone.jar https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-console-standalone/1.7.1/junit-platform-console-standalone-1.7.1.jar
          curl -L -o junit-jupiter-api.jar https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-api/5.9.2/junit-jupiter-api-5.9.2.jar
          curl -L -o junit-jupiter-engine.jar https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-engine/5.9.2/junit-jupiter-engine-5.9.2.jar

      - name: Vérifier les fichiers téléchargés
        run: dir

      - name: Compiler le projet
        run: javac -d build src/**/*.java

      - name: Exécuter les tests JUnit
        run: java -jar junit-platform-console-standalone.jar --class-path build --scan-class-path

      - name: Créer un JAR exécutable
        run: jar cvf build/app.jar -C build .

      - name: Sauvegarder l’artefact
        uses: actions/upload-artifact@v4
        with:
          name: application
          path: build/app.jar

  deploy:
    needs: build
    runs-on: windows-latest

    steps:
      - name: Récupérer l’artefact
        uses: actions/download-artifact@v4
        with:
          name: application
          path: build

      - name: Déployer via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p ~/app
            rm -f ~/app/app.jar
            mv build/app.jar ~/app/app.jar
            cd ~/app
            nohup java -jar app.jar > output.log 2>&1 &
